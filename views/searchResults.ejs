<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Streambase | Home</title>
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;700&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="/styles/style.css" />
  <script src="/javascript/index.js" defer></script>
  <script src="/javascript/searchPagination.js" defer></script>
</head>

<body class="container bg-dark ff-sans-cond">
 
  <%= console.log("this is results", results[0]) %>
 
  <%- include('partials/header.ejs', { loggedIn: login }); %>
  <%- include('partials/loginModal.ejs') %>
  <main class="main-search">
    <div class="results-container flex">
      <% results.map(media => { %>
      <div class="result-item">
        <%- include('partials/mediaCard.ejs', { media: media }); %>
        <div class="result-item--info flex">
          <h4 class="fs-500"><%= media.name || media.title %></h4>
          <span><%= media.release_date || media.first_air_date %></span>
          <p><%= media.overview %></p>
        </div>
      </div>
      <%  }); %>
    </div>
  </main>
  <%- include('partials/footer.ejs'); %>
  <script >
    //options for intersection observer
    //root - element for checking the visibility of the target. default = browser viewport
    //rootMargin - values serve to grow or shrink each side of the root elements bounding box before computing intersections. default = 0;
    //threshold - sets how much of the target needs to be visible for the callback to run.
    let options = {
    rootMargin: '0px 0px 10%',
    threshold: 1,
    };
    //container to append results
    const resultsContainer = document.querySelector('.results-container');

    let page = (function () {
        let page = 1;
        return function () {
        return page += 1
        }
      })();

    //infinite scroll
    const loadMore = async () => {
      
    //search query
    let query = '<%= query %>';
    try {
        const response = await fetch("/search?" + new URLSearchParams({
            query: query,
            page: page(),
        }));
        let data =  await response.json();

    data.results.forEach(media => {
      //set the media type for the href
      let mediaType = '';
      if (media.mediaType) {
        mediaType = media.mediaType 
      }else if (media.name) {
        mediaType = 'tv';
      } else {
        mediaType = 'movie';
      } 
      //create elements
        const resultItem = document.createElement('div')
        const mediaCard = document.createElement('div')
        const anchor = document.createElement('a');
        const mediaPoster = document.createElement('img')
        const resultItemInfo = document.createElement('div')
        const title = document.createElement('h4');
        const releaseDate = document.createElement('span');
        const overview = document.createElement('p');

        //add classes
        resultItem.classList.add('result-item');
        mediaCard.classList.add('media-card');
        mediaPoster.classList.add('media-poster');
        resultItemInfo.classList.add('result-item--info');
        resultItemInfo.classList.add('flex');
        title.classList.add('fs-500');

        //add content
        anchor.href = `/details/${mediaType}/${media.id}` ;
        title.innerText = media.title || media.name;
        releaseDate.innerText = media.release_date || media.first_air_date;
        overview.innerText = media.overview;
        
        //add attributes
        mediaPoster.setAttribute('loading', 'lazy');
        mediaPoster.setAttribute('srcset', `https://image.tmdb.org/t/p/w342${media.poster_path} 342w, https://image.tmdb.org/t/p/w500${media.poster_path} 500w` )
        mediaPoster.setAttribute('sizes', '(max-width: 500px) 342px, 500px');
        mediaPoster.setAttribute('height', '750');
        mediaPoster.setAttribute('width', '500');
        mediaPoster.setAttribute('alt', media.title || media.name);

        //append element
        anchor.appendChild(mediaPoster);
        mediaCard.appendChild(anchor);
        resultItem.appendChild(mediaCard);
        resultItemInfo.appendChild(title);
        resultItemInfo.appendChild(releaseDate);
        resultItemInfo.appendChild(overview);
        resultItem.appendChild(resultItemInfo);
        resultsContainer.appendChild(resultItem);
      })
   
  
    } catch(err) {
        console.log("script tag", err);
    }
}

  const observer = new IntersectionObserver(([entry]) => {
    if (entry.isIntersecting) {
      loadMore();
    }
  }, options);
  observer.observe(document.querySelector('.footer-logo'));


  </script>